#!/usr/bin/perl
# -*- encoding: utf-8; indent-tabs-mode: nil -*-
#
# Generating some code for the astronomical rule in the Pascal program and the Perl 6 module.
# Génération d'une partie du code pour la règle des équinoxes dans le programme Pascal
#    et le module Perl 6.
#
# Copyright (C) 2019, Jean Forget
#
# Author: Jean Forget
# Maintainer: Jean Forget
# Keywords: French Revolution, calendar, Emacs
#
# This program is free software; you can redistribute it and modify
# it under the terms of Perl:
# -- either the GNU General Public License as published by
#    the Free Software Foundation; version 1, or (at your option)
#    any later version,
# -- or the Artistic Licence.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, check the website of the Free Software
# Foundation, Inc., <https://www.fsf.org/>.

use utf8;
use v5.10;
use strict;
use warnings;
use Getopt::Long;
use YAML;

my $lang = 'pascal';
my $nb   = 20;

Getopt::Long::GetOptions('lang:s'  => \$lang,
                         'nb:i'    => \$nb,
    ) or die "Problème avec les options";
$lang = lc($lang);
if ($lang ne 'pascal' && $lang ne 'text' && $lang ne 'perl6') {
  die "Unknown language: '$lang'";
}

my $lisp      = "/usr/bin/gcl";
my @lisp_args = ( "-f" );
my $pgl       = "cmpeq.cl";

my @result = ([], [], [], []);

my @lines = qx/$lisp @lisp_args $pgl $nb/;
for (@lines) {
  my ($re_y, $gr_y, $equi_d, $arit_d) = $_ =~ /^\s*(\d+)\s+(\d+)\s+(\d+)\s+(\d+)/;
  my $modulo = $gr_y % 4;
  if (0 == @{$result[$modulo]}) {
    $result[$modulo][0]{begin} = $gr_y;
    $result[$modulo][0]{end}   = $gr_y;
    $result[$modulo][0]{val}   = $equi_d;
  }
  elsif ($equi_d != $result[$modulo][-1]{val}) {
    push @{$result[$modulo]}, { begin => $gr_y, end => $gr_y, val => $equi_d};
  }
  else {
    $result[$modulo][-1]{end}   = $gr_y;
  }
}

#print YAML::Dump(\@result);
if ($lang eq 'text') {
  for my $modulo (0..3) {
    say "Modulo ", $modulo;
    my @years;
    my @itvls;
    for my $itvl (@{$result[$modulo]}) {
       $years[$itvl->{val}] += 1 + ($itvl->{end} - $itvl->{begin}) / 4;
       $itvls[$itvl->{val}] ++;
       printf "  %d  %d  %3d\n", $itvl->{begin}, $itvl->{end}, $itvl->{val};
    }
    for my $day (0..$#years) {
      if ($years[$day]) {
        printf "  %d : %3d interval(s), %3d year(s)\n", $day, $itvls[$day], $years[$day];
      }
    }
  }
}

if ($lang eq 'pascal') {
  for my $modulo (0..3) {
    say "   $modulo: begin";
    my @years;
    my @itvls;
    my ($day_max, $years_max, $itvl_max) = (0) x 3;
    for my $itvl (@{$result[$modulo]}) {
       my $val = $itvl->{val};
       $years[$val] += 1 + ($itvl->{end} - $itvl->{begin}) / 4;
       $itvls[$val] ++;
       if ($itvls[$val] > $itvl_max || ($itvls[$val] == $itvl_max && $years[$val] > $years_max)) {
         $day_max   = $val;
         $years_max = $years[$val];
         $itvl_max  = $itvls[$val];
       }
    }
    say ' ' x 9, 'equinoxe := ', $day_max, ';';
    my $else = '';
    for my $itvl (@{$result[$modulo]}) {
      my $day = $itvl->{val};
      if ($day != $day_max) {
        if ($itvl->{begin} == $itvl->{end}) {
          say ' ' x 8, "$else if (annee = ", $itvl->{begin}, ') then';
        }
        else {
          say ' ' x 8, "$else if (annee >= ", $itvl->{begin}, ') and (annee <= ', $itvl->{end}, ') then';
        }
        say ' ' x 12, 'equinoxe := ', $day;
        $else = ' else'
      }
    }
    say '      end;';
  }
}

if ($lang eq 'perl6') {
  for my $modulo (0..3) {
    say ' ' x 6, "when $modulo {";
    my @years;
    my @itvls;
    my ($day_max, $years_max, $itvl_max) = (0) x 3;
    for my $itvl (@{$result[$modulo]}) {
       my $val = $itvl->{val};
       $years[$val] += 1 + ($itvl->{end} - $itvl->{begin}) / 4;
       $itvls[$val] ++;
       if ($itvls[$val] > $itvl_max || ($itvls[$val] == $itvl_max && $years[$val] > $years_max)) {
         $day_max   = $val;
         $years_max = $years[$val];
         $itvl_max  = $itvls[$val];
       }
    }
    say ' ' x 8, '$result = ', $day_max, ';';
    say ' ' x 8, 'given $year-gr {';
    my $else = '';
    for my $itvl (@{$result[$modulo]}) {
      my $day = $itvl->{val};
      if ($day != $day_max) {
        if ($itvl->{begin} == $itvl->{end}) {
          say ' ' x 10, "when ", $itvl->{begin}, "       { \$result = $day }";
        }
        else {
          say ' ' x 10, "when ", $itvl->{begin}, '..', $itvl->{end}, " { \$result = $day }";
        }
      }
    }
    say '        }';
    say '      }';
  }
}

__END__ 

=encoding utf8

=head1 NAME / NOM

gen-astro-code -- a program to generate some Pascal or Perl 6 code for the equinox rule

gen-astro-code -- un programme pour générer une partie du code Pascal ou Perl 6 pour la règle des équinoxes

=head1 UTILISATION

  gen-astro-code --lang=text   --nb=20
  gen-astro-code --lang=pascal --nb=6000
  gen-astro-code --lang=perl6  --nb=6000

=head1 CALL PARAMETERS / PARAMÈTRES D'APPEL

=over 4

=item lang

Target language. For the moment, the only accepted language are Pascal
and Perl6 (with no  space). Or you can print the  list of intervals as
text by asking for language C<text>.

Langage de  destination. Pour l'instant,  seul Pascal et  Perl6 (écrit
sans espace) sont acceptés. Vous pouvez également obtenir la liste des
intervalles  sous  forme  de  texte simple  en  demandant  le  langage
C<text>.

=item nb

Number of years to be included in the target code.

Nombre d'années à inclure dans le code cible.

=back

=head1 DESCRIPTION (ENGLISH)

This program generates a portion of  the code to implement the equinox
rule in the  Pascal program and in  the Perl 6 module so  it will give
the same values as F<calendar.l>.

=head1 DESCRIPTION (FRANCAIS)

Ce programme  génère une partie du  code destiné à mettre  en œuvre la
règle des équinoxes dans le programme  Pascal et dans le module Perl 6
pour obtenir les mêmes valeurs que F<calendar.l>.

=head1 CONFIGURATION ET ENVIRONNEMENT

None.

Néant.

=head1 DEPENDENCIES / DÉPENDANCES

F<DateTime>

F<DateTime::Calendar::FrenchRevolutionary> version 0.12

F<calendar.l>.

v5.10 : C<say>, F<Getopt::Long> (core module)

=head1 INCOMPATIBILITIES / INCOMPATIBILITÉS

No known incompatibilities.

Aucune incompatibilité identifiée.

=head1 BUGS AND LIMITS

When used  with F<calendrica-3.0.cl>,  the script was  giving slightly
different  results when  calling  C<clisp> or  C<gcl>  to compute  the
autumn equinox value. Now,  with F<calendar.l>, both interpreters give
the same results.

=head1 BOGUES ET LIMITES

Lorsqu'il fonctionnait avec F<calendrica-3.0.cl>, ce programme donnait
des résultats  légèrements différents selon que  l'interpréteur Common
Lisp appelé était C<clisp> ou C<gcl>. Maintenant que le programme fait
appel   à   F<calendar.l>,  les   résultats   ne   dépendent  pas   de
l'interpréteur.

=head1 AUTHOR / AUTEUR

Jean Forget, JFORGET (à) cpan.org

=head1 SEE ALSO / VOIR ÉGALEMENT

=head2 Software / Logiciels

=head3 By me / par moi-même

L<DateTime::Calendar::FrenchRevolutionary> or L<https://github.com/jforget/DateTime-Calendar-FrenchRevolutionary>

L<Date::Convert::French_Rev> or L<https://github.com/jforget/Date-Convert-French_Rev>

L<https://www.gnu.org/software/apl/Bits_and_Pieces/calfr.apl.html> or L<https://github.com/jforget/apl-calendar-french>

L<https://www.hpcalc.org/details/7309> or L<https://github.com/jforget/hp48-hp50-French-Revolutionary-calendar>

L<https://github.com/jforget/hp41-calfr>

L<https://github.com/jforget/Pascal-French-Revolutionary-Calendar>

=head3 Only partly by me / En partie par moi

L<https://github.com/jforget/emacs-lisp-cal-french>, a fork of F<calendar/cal-french.el> in Emacs

=head3 Not by me / Pas par moi

CALENDRICA 3.0 (an old version) -- Common Lisp, which can be downloaded in the "Resources" section of
L<http://www.cambridge.org/us/academic/subjects/computer-science/computing-general-interest/calendrical-calculations-3rd-edition?format=PB&isbn=9780521702386>

CALENDRICA 4.0 (the latest version) -- Common Lisp, which can be download in the "Resources" section of
L<https://www.cambridge.org/us/academic/subjects/computer-science/computing-general-interest/calendrical-calculations-ultimate-edition-4th-edition?format=PB&isbn=9781107683167>

French Calendar for Android at
L<https://f-droid.org/packages/ca.rmen.android.frenchcalendar/>
or L<https://github.com/caarmen/FRCAndroidWidget>
and L<https://github.com/caarmen/french-revolutionary-calendar>

Thermidor for Android at L<https://github.com/jhbadger/Thermidor-Android>

A Ruby program at L<https://github.com/jhbadger/FrenchRevCal-ruby>

=head2 Books / Livres

Quid 2006, M and D Frémy, publ. Robert Laffont ISBN 2-221-10448-X page 341.

Agenda Républicain 197 (1988/89), publ. Syros Alternatives

Any French schoolbook about the French Revolution / n'importe quel
livre d'Histoire scolaire portant sur la Révolution Française.

The French Revolution, Thomas Carlyle, Oxford University Press

Calendrier Militaire, anonymous

Calendrical Calculations (Third Edition) by Nachum Dershowitz and
Edward M. Reingold, Cambridge University Press, see
L<http://www.calendarists.com>
or L<http://www.cambridge.org/us/academic/subjects/computer-science/computing-general-interest/calendrical-calculations-3rd-edition?format=PB&isbn=9780521702386>.

=head2 Internet

L<http://www.faqs.org/faqs/calendars/faq/part3/>

L<http://datetime.mongueurs.net/>

L<http://www.allhotelscalifornia.com/kokogiakcom/frc/default.asp>

L<https://en.wikipedia.org/wiki/French_Republican_Calendar> / L<https://fr.wikipedia.org/wiki/Calendrier_républicain>

L<http://prairial.free.fr/calendrier/calendrier.php?lien=sommairefr> (in French)

=head1 LICENSE AND COPYRIGHT / LICENCE ET COPYRIGHT

(C) Jean Forget, 2019, all rights reserved.

The  terms of  license for  this script  are the  same as  Perl's: GNU
General Public License (GPL) and Artistic License.

(C) Jean Forget, 2019, tous droits réservés.

Les termes  de licence  de ce  script sont les  mêmes termes  que pour
S<Perl :> GNU General Public License (GPL) et Artistic License.

=cut
